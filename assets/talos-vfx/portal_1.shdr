<shader>
	<uniforms>
		<uniform name="u_time" type="float"/>
	</uniforms>
	<methods>
		<![CDATA[vec2 twirlNode(vec2 offset, vec2 outputValue, vec2 uv, vec2 center, float strength) {

                    vec2 delta = uv - center;
                    float angle = strength * length(delta);
                    float x = cos(angle) * delta.x - sin(angle) * delta.y;
                    float y = sin(angle) * delta.x + cos(angle) * delta.y;
                    return vec2(x + center.x + offset.x, y + center.y + offset.y);
                
}
float voronoiNoise(vec2 uv, float angleOffset, float cellDensity) {
    float outputValue = 0.0;
float cells = 0.0;

vec2 g = floor(uv * cellDensity);
vec2 f = fract(uv * cellDensity);
float t = 8.0;
vec3 res = vec3(8.0, 0.0, 0.0);

for(int y=-1; y<=1; y++)
{
    for(int x=-1; x<=1; x++)
    {
        vec2 lattice = vec2(x,y);
        
        vec2 latg = lattice + g;
		mat2 m = mat2(15.27, 47.63, 99.41, 89.98);
    	latg = fract(sin(latg * m) * 46839.32);
    	vec2 offset = vec2(sin(latg.y*+angleOffset)*0.5+0.5, cos(latg.x*angleOffset)*0.5+0.5);

        float d = distance(lattice + offset, f);
        if(d < res.x)
        {
            res = vec3(d, offset.x, offset.y);
            outputValue = res.x;
            cells = res.y;
        }
    }
}

return outputValue;

}
float sphereMaskNode(float outputValue, vec2 uv, float hardness, float radius, vec2 center) {

                    return 1.0 - clamp((distance(uv, center) - radius) / (1.0 - hardness), 0.0, 1.0);
                
}

]]>
	</methods>
	<main>
		<![CDATA[    float mathVar0 = (u_time) * (0.2);
    vec2 twirlNodeVar0 = twirlNode(vec2(mathVar0), vec2(0.0), v_texCoords, vec2(0.5), 10.0);
    float voronoiVar0 = voronoiNoise(twirlNodeVar0, 4.5978885, 2.134735);
    vec4 rgbVar0 = vec4((vec4(voronoiVar0, voronoiVar0, voronoiVar0, 1.0)).r,(vec4(voronoiVar0, voronoiVar0, voronoiVar0, 1.0)).r,(vec4(voronoiVar0, voronoiVar0, voronoiVar0, 1.0)).r,(vec4(voronoiVar0, voronoiVar0, voronoiVar0, 1.0)).r);
    float sphereMaskNodeVar1 = sphereMaskNode(float(0.0), v_texCoords, 0.5, 0.0, vec2(vec2(0.5, 0.5)));
    vec4 mathVar1 = (vec4(sphereMaskNodeVar1, sphereMaskNodeVar1, sphereMaskNodeVar1, 1.0)) * (rgbVar0);
    vec4 mathVar2 = (v_color) * (mathVar1);
    vec4 mathVar3 = (mathVar2) * (vec4(2.0, 2.0, 2.0, 1.0));
    return mathVar3;
]]>
	</main>
</shader>
